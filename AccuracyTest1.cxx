/*=========================================================================

  Program:   BRP Prostate Robot: Accuracy Test Application (Client)
  Language:  C++
  Author: Nirav Patel

  Copyright (c) Worcester Polytechnic Institute. All rights reserved.

  This software is distributed WITHOUT ANY WARRANTY; without even
  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE.  See the above copyright notices for more information.

  Please see
    http://wiki.na-mic.org/Wiki/index.php/ProstateBRP_OpenIGTLink_Communication_June_2013
  for the detail of the testing protocol.

=========================================================================*/

#include <string.h>
#include <stdio.h>
#include "igtlOSUtil.h"
#include "igtlStringMessage.h"
#include "igtlClientSocket.h"
#include "igtlSocket.h"
#include "igtlStatusMessage.h"
#include "igtlTransformMessage.h"

#include "AccuracyTest1.h"
//#include "mathUtils.h"

AccuracyTest1::AccuracyTest1()
{
}

AccuracyTest1::~AccuracyTest1()
{
}


AccuracyTest1::ErrorPointType AccuracyTest1::Test()
{
igtl::Matrix4x4 targets[] = {	 { {0.999410,0.013580,-0.031410,30.689952 }, {-0.013400,0.999890,0.006050,23.903715 }, {0.031480,-0.005630,0.999490,24.721247 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.992869,0.015636,-0.118141,30.689952 }, {-0.012822,0.999614,0.024578,23.903715 }, {0.118472,-0.022892,0.992695,24.721247 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.998710,0.016117,-0.048070,30.689952 }, {-0.013292,0.998191,0.058597,23.903715 }, {0.048919,-0.057887,0.997125,24.721247 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.999806,0.012831,-0.014655,30.689952 }, {-0.013504,0.998824,-0.046515,23.903715 }, {0.014032,0.046700,0.998812,24.721247 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.998345,0.014548,0.055569,30.689952 }, {-0.013876,0.999823,-0.012526,23.903715 }, {-0.055751,0.011730,0.998377,24.721247 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.999410,0.013580,-0.031410,45.681102 }, {-0.013400,0.999890,0.006050,23.702715 }, {0.031480,-0.005630,0.999490,25.193447 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.992869,0.015636,-0.118141,45.681102 }, {-0.012822,0.999614,0.024578,23.702715 }, {0.118472,-0.022892,0.992695,25.193447 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.998710,0.016117,-0.048070,45.681102 }, {-0.013292,0.998191,0.058597,23.702715 }, {0.048919,-0.057887,0.997125,25.193447 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.999806,0.012831,-0.014655,45.681102 }, {-0.013504,0.998824,-0.046515,23.702715 }, {0.014032,0.046700,0.998812,25.193447 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.998345,0.014548,0.055569,45.681102 }, {-0.013876,0.999823,-0.012526,23.702715 }, {-0.055751,0.011730,0.998377,25.193447 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.999410,0.013580,-0.031410,30.758958 }, {-0.013400,0.999890,0.006050,28.984579 }, {0.031480,-0.005630,0.999490,24.692639 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.992869,0.015636,-0.118141,30.758958 }, {-0.012822,0.999614,0.024578,28.984579 }, {0.118472,-0.022892,0.992695,24.692639 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.998710,0.016117,-0.048070,30.758958 }, {-0.013292,0.998191,0.058597,28.984579 }, {0.048919,-0.057887,0.997125,24.692639 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.999806,0.012831,-0.014655,30.758958 }, {-0.013504,0.998824,-0.046515,28.984579 }, {0.014032,0.046700,0.998812,24.692639 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.998345,0.014548,0.055569,30.758958 }, {-0.013876,0.999823,-0.012526,28.984579 }, {-0.055751,0.011730,0.998377,24.692639 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.999410,0.013580,-0.031410,45.750108 }, {-0.013400,0.999890,0.006050,28.783579 }, {0.031480,-0.005630,0.999490,25.164839 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.992869,0.015636,-0.118141,45.750108 }, {-0.012822,0.999614,0.024578,28.783579 }, {0.118472,-0.022892,0.992695,25.164839 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.998710,0.016117,-0.048070,45.750108 }, {-0.013292,0.998191,0.058597,28.783579 }, {0.048919,-0.057887,0.997125,25.164839 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.999806,0.012831,-0.014655,45.750108 }, {-0.013504,0.998824,-0.046515,28.783579 }, {0.014032,0.046700,0.998812,25.164839 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.998345,0.014548,0.055569,45.750108 }, {-0.013876,0.999823,-0.012526,28.783579 }, {-0.055751,0.011730,0.998377,25.164839 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.999410,0.013580,-0.031410,38.286220 }, {-0.013400,0.999890,0.006050,31.217186 }, {0.031480,-0.005630,0.999490,24.915602 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.992869,0.015636,-0.118141,38.286220 }, {-0.012822,0.999614,0.024578,31.217186 }, {0.118472,-0.022892,0.992695,24.915602 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.998710,0.016117,-0.048070,38.286220 }, {-0.013292,0.998191,0.058597,31.217186 }, {0.048919,-0.057887,0.997125,24.915602 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.999806,0.012831,-0.014655,38.286220 }, {-0.013504,0.998824,-0.046515,31.217186 }, {0.014032,0.046700,0.998812,24.915602 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.998345,0.014548,0.055569,38.286220 }, {-0.013876,0.999823,-0.012526,31.217186 }, {-0.055751,0.011730,0.998377,24.915602 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.999410,0.013580,-0.031410,38.147858 }, {-0.013400,0.999890,0.006050,21.029646 }, {0.031480,-0.005630,0.999490,24.972964 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.992869,0.015636,-0.118141,38.147858 }, {-0.012822,0.999614,0.024578,21.029646 }, {0.118472,-0.022892,0.992695,24.972964 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.998710,0.016117,-0.048070,38.147858 }, {-0.013292,0.998191,0.058597,21.029646 }, {0.048919,-0.057887,0.997125,24.972964 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.999806,0.012831,-0.014655,38.147858 }, {-0.013504,0.998824,-0.046515,21.029646 }, {0.014032,0.046700,0.998812,24.972964 }, {0.000000,0.000000,0.000000,1.000000 } },
	 { {0.998345,0.014548,0.055569,38.147858 }, {-0.013876,0.999823,-0.012526,21.029646 }, {-0.055751,0.011730,0.998377,24.972964 }, {0.000000,0.000000,0.000000,1.000000 } }
};

igtl::Matrix4x4 zFrame2RAS = { { 1, 0, 0, 0}, 
			       { 0, 1, 0, 0},
			       { 0, 0, 1, 0},
			       { 0, 0, 0, 1} };

int num_targets = sizeof(targets) / sizeof(igtl::Matrix4x4);
std::cout << "Number of Targets=" + num_targets << std::endl;
for( int i=0;i<num_targets ;i++){
	std::cout << "Target " << i << std::endl;
	igtl::PrintMatrix(targets[i]);
	//std::cout<< "After Multiplication " <<std::endl ;
	//igtl::PrintMatrix(matrixMul( targets[i] , zFrame2RAS ));
	std::cout <<std::endl;
}

  int queryCounter = 0;
  igtl::MessageHeader::Pointer headerMsg;
  headerMsg = igtl::MessageHeader::New();



igtl::Matrix4x4 home = {{0.99988, -0.00422, 0.01499, 216.01504},
{0.00418, 0.99999, 0.00243, 72.80456},
{-0.01500, -0.00237, 0.99988, 71.56411},
{0,       0,       0,       1}};



   int ch = 0;
   for(int i=0;i<num_targets;i++)
   {

          std::cerr << "CURRENTLY SELECTED TARGET IS TARGET-" << i << std::endl;
	  std::cerr << "Hit '1' to send or '2' to skip this target. To Send HOME transform press '3'" << std::endl ;
	  std::cerr << "Enter your choic and hit ENTER: " ;
	  scanf( "%d" , &ch );

	  if( ch == 2 ) //means Escape 
	  {
		  std::cerr << "SKIPPING TARGET-" << i << std::endl ;
	  }
	  else if( ch== 1)//means ENTER
	  {
		  std::cerr << "Sending Target TARGET-" << i << std::endl;
		  igtl::PrintMatrix(targets[i]);
		  SendTransformMessage("TGT_0001", targets[i]);
		  ReceiveMessageHeader(headerMsg, this->TimeoutLong);
		  if (!CheckAndReceiveTransformMessage(headerMsg, "ACK_0001", targets[i])) return Error(4,3);
		  ReceiveMessageHeader(headerMsg, 60000);
		  if (!CheckAndReceiveStatusMessage(headerMsg, "TARGET", 1)) return Error(4,5);
		  ReceiveMessageHeader(headerMsg, 60000);
		  if (!CheckAndReceiveTransformMessage(headerMsg, "TARGET", targets[i])) return Error(4,6);

	 }
	 else if( ch==3)
	 {
		  std::cerr << "Sending Target Home" << std::endl;
		  igtl::PrintMatrix(home);
		  SendTransformMessage("TGT_0001", home);
		  ReceiveMessageHeader(headerMsg, this->TimeoutLong);
		  if (!CheckAndReceiveTransformMessage(headerMsg, "ACK_0001", home)) return Error(4,3);
		  ReceiveMessageHeader(headerMsg, this->TimeoutLong);
		  if (!CheckAndReceiveStatusMessage(headerMsg, "TARGET", 1)) return Error(4,5);
		  ReceiveMessageHeader(headerMsg, this->TimeoutLong);
		  if (!CheckAndReceiveTransformMessage(headerMsg, "TARGET", home)) return Error(4,6);
		  i--;
	}
   } 
  
  return SUCCESS;
}
